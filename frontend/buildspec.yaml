version: 0.2
env:
  git-credential-helper: yes
phases:
  install:
    commands:
      - echo "Install Phase - Nothing to do using latest Amazon Linux Docker Image for CodeBuild which has all AWS Tools - https://github.com/aws/aws-codebuild-docker-images/blob/master/al2/x86_64/standard/3.0/Dockerfile"
      # Install kustomize
      - curl -sLo /tmp/kustomize.tar.gz  https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.0.3/kustomize_v5.0.3_linux_amd64.tar.gz
      - tar xzvf /tmp/kustomize.tar.gz -C /usr/bin/ && chmod +x /usr/bin/kustomize && rm -rf /tmp/kustomize.tar.gz
      - kustomize version
      ## Install argocd cli
      #- curl -sLo /usr/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.7.2/argocd-linux-amd64 && chmod +x /usr/bin/argocd
      #- argocd version --client
      ## Get docker credentials and login
      - echo "Logging in to Docker..."
      - DOCKER_CREDS=$(aws secretsmanager get-secret-value --secret-id iac-my-docker-secret --query SecretString --output text)
      - DOCKER_USERNAME=$(echo $DOCKER_CREDS | jq -r .username)
      - DOCKER_PASSWORD=$(echo $DOCKER_CREDS | jq -r .password)
      - echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
      ## Install trivy
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.22.0
      - trivy --version
  pre_build:
      commands:
        # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
        # - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
        - export TAG=$CODEBUILD_BUILD_NUMBER
        # Verify AWS CLI Version        
        - echo "Verify AWS CLI Version..."
        - aws --version
        # Login to ECR Registry for docker to push the image to ECR Repository
        - echo "Login in to Amazon ECR..."
        - $(aws ecr get-login --no-include-email)
        # Update Kube config Home Directory
        #- export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      # Build Docker Image
      #- cd CODEBUILD_SRC_DIR
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      ## Check Dockerfile misconfiguration
      - trivy config --exit-code 1 ./Dockerfile
      - docker build --tag $REPOSITORY_URI:$TAG .  > /dev/null  # hide build output
      ## Image vulnerability scanning
      - trivy image --exit-code 1 --severity CRITICAL $REPOSITORY_URI:$TAG || true
  post_build:
    commands:
      # Push Docker Image to ECR Repository
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"    
      ## Create Artifacts which we can use if we want to continue our pipeline for other stages 
      - printf '[{"app_name":"%s","image_name":"%s","image_tag":"%s"}]' "${APP_NAME}" "$REPOSITORY_URI" "$TAG" > $CODEBUILD_SRC_DIR/build.json
      #- kubectl apply -k $ENV --dry-run=client -oyaml | envsubst > manifests.yaml  
      - kustomize build $CODEBUILD_SRC_DIR_K8S/$ENV > $CODEBUILD_SRC_DIR/manifests.yaml
      - cat $CODEBUILD_SRC_DIR/manifests.yaml
      - cat $CODEBUILD_SRC_DIR/build.json
artifacts:
  files: 
    - build.json   
    - manifests.yaml
    - argocd.yaml
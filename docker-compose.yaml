version: "3.3"
networks:
  devops:
    driver: bridge
volumes:
  redis-data:
  opensearch-data1:
  opensearch-data2:
services:
  ui:
    image:  codesenju/skillsets-ui:latest
    build:
      context: frontend/
      dockerfile: Dockerfile
    container_name: skillsets-ui
    environment:
      NEXT_PUBLIC_API_ENDPOINT: "http://skillsets:5000"
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://otel-collector:4317"
      # OTEL_RESOURCE_ATTRIBUTES: "service.name=skillsets-ui,service.namespace=docker,service.version=1.0"
      OTEL_ENDPOINT_GRPC: "http://otel-collector:4317"
    restart: unless-stopped
    networks:
      - devops
    ports:
      - 3000:3000
    depends_on:
      - skillsets
  skillsets:
    image:  codesenju/skillsets:otel
    build: skillsets/
    container_name: skillsets
    environment:
       REDIS_PASSWORD: "12345"
       REDIS_HOST: "redis"
       REDIS_PORT: "6379"
       OTEL_TRACES_EXPORTER: "otlp"
       OTEL_SERVICE_NAME: "skillsets-api"
       OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "http://otel-collector:4317"
#       OTEL_EXPORTER_OTLP_METRICS_ENDPOINT:  "http://otel-collector:4317"
#       OTEL_EXPORTER_OTLP_LOGS_ENDPOINT:  "http://otel-collector:4317"
#       OTEL_TRACES_SAMPLER: xray
       OTEL_PROPAGATORS: xray
       OTEL_PYTHON_ID_GENERATOR: xray
    restart: unless-stopped
    networks:
      - devops
    ports:
      - 5050:5000
    depends_on:
      - redis
  redis:
    image: redis/redis-stack:edge
    container_name: redis
    environment:
      REDIS_ARGS: "--save 60 1 --loglevel warning --requirepass 12345"
    restart: unless-stopped
    #command:
    #  - redis-server
    #  - --save
    #  - "60" 
    #  - "1" 
    #  - --loglevel
    #  - warning
    #  - --requirepass
    #  - $(echo $REDIS_PASSWORD)
    networks:
        - devops
    volumes:
       - redis-data:/data
#    ports:
#      - 6379:6379 
  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.75.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 125M
#    restart: unless-stopped
    command:
      - --config=/etc/otel-collector-config.yaml
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - devops
    ports:
      - "4317:4317"     # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.43
    container_name: jaeger
#    command:
#      - "--memory.max-traces"
#      - "10000"
#      - "--query.base-path"
#      - "/jaeger/ui"
#      - "--prometheus.server-url"
#      - "http://${PROMETHEUS_ADDR}"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    networks:
      - devops
    ports:
      - "16686:16686"                   # Jaeger UI
#      - "4317:4317"                     # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true

#========== Opensearch
  opensearch-node1: # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:2.13.0 # Specifying the latest available image - modify if you want a specific version
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}    # Sets the demo admin user password when using demo configuration, required for OpenSearch 2.12 and later
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    networks:
      - devops # All of the containers will join the same Docker bridge network
  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_INITIAL_ADMIN_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    networks:
      - devops
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.13.0 # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - devops

#========== data-prepper
  data-prepper:
    restart: unless-stopped
    container_name: data-prepper
    image: opensearchproject/data-prepper:2
    volumes:
      - ./trace_analytics_no_ssl_2x.yml:/usr/share/data-prepper/pipelines/pipelines.yaml
      - ./data-prepper-config.yaml:/usr/share/data-prepper/config/data-prepper-config.yaml
    ports:
      - "21890:21890"
    networks:
      - devops
    depends_on:
      - opensearch-dashboards